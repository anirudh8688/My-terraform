🔍 list(object(...)) vs map(object(...)) vs set(string)

Type	Description	When to Use
list(object({...}))	Ordered collection of structured items	When order matters or you might have duplicates
map(object({...}))	Unordered collection of key-object pairs (like a dictionary)	When you want to access items by key (like a name or ID)
set(string)	Unordered collection of unique strings	When all you need is a group of strings and duplicates are not allowed
1️⃣ list(object(...)) – Example: List of EC2 instances
hcl
Copy
Edit
variable "instance_list" {
  type = list(object({
    name          = string
    instance_type = string
    env           = string
  }))
}
🧪 Valid Value:

hcl
Copy
Edit
instance_list = [
  {
    name          = "web-1"
    instance_type = "t2.micro"
    env           = "dev"
  },
  {
    name          = "web-2"
    instance_type = "t2.micro"
    env           = "prod"
  }
]
✅ Use When:

You need to loop through items in order.

You're okay with duplicate entries.

2️⃣ map(object(...)) – Example: Map of named EC2 configs
hcl
Copy
Edit
variable "instance_map" {
  type = map(object({
    instance_type = string
    env           = string
  }))
}
🧪 Valid Value:

hcl
Copy
Edit
instance_map = {
  "web-1" = {
    instance_type = "t2.micro"
    env           = "dev"
  },
  "web-2" = {
    instance_type = "t2.medium"
    env           = "prod"
  }
}
✅ Use When:

You want to reference by key, e.g., instance_map["web-1"].env

You want deterministic names for resources using for_each.

3️⃣ set(string) – Example: Set of security group names
hcl
Copy
Edit
variable "security_groups" {
  type = set(string)
}
🧪 Valid Value:

hcl
Copy
Edit
security_groups = ["web", "db", "cache"]
🚫 Invalid (duplicates not allowed):

hcl
Copy
Edit
security_groups = ["web", "web", "db"]  # ❌ error
✅ Use When:

You only care about unique values.

No need to store additional info (just strings).

⚖️ Summary Table

Use Case	Recommended Type
List of servers with configs	list(object(...))
Map of servers keyed by name	map(object(...))
Unique list of environment names	set(string)
Looping and tagging resources	map(object(...)) with for_each

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Perfect! Let's build a real-world Terraform example that uses:

✅ list(object(...)) – for EC2 instance configs

✅ map(object(...)) – for named environments

✅ set(string) – for allowed environments

📦 Scenario:
You're provisioning EC2 instances per environment (dev, staging, prod), and each environment has:

A list of instances (name + instance_type)

A specific subnet

A list of allowed environments to validate input

🧱 variables.tf
hcl
Copy
Edit
variable "allowed_envs" {
  type    = set(string)
  default = ["dev", "staging", "prod"]
}

variable "environment_config" {
  type = map(object({
    subnet_id = string
    instances = list(object({
      name          = string
      instance_type = string
    }))
  }))
  default = {
    dev = {
      subnet_id = "subnet-dev123"
      instances = [
        { name = "dev-app-1", instance_type = "t2.micro" },
        { name = "dev-db-1",  instance_type = "t3.small" }
      ]
    },
    prod = {
      subnet_id = "subnet-prod123"
      instances = [
        { name = "prod-app-1", instance_type = "t3.medium" },
        { name = "prod-db-1",  instance_type = "t3.large" }
      ]
    }
  }
}
📦 main.tf
hcl
Copy
Edit
locals {
  # Flatten list of instances into a single map for for_each
  flattened_instances = merge([
    for env, cfg in var.environment_config : {
      for inst in cfg.instances : "${env}-${inst.name}" => {
        env           = env
        name          = inst.name
        instance_type = inst.instance_type
        subnet_id     = cfg.subnet_id
      }
    }
  ]...)
}

resource "aws_instance" "env_instances" {
  for_each = local.flattened_instances

  ami           = "ami-0b08bfc6ff7069aff"
  instance_type = each.value.instance_type
  subnet_id     = each.value.subnet_id

  tags = {
    Name = each.value.name
    Env  = each.value.env
  }
}
💡 Explanation

Concept	Where Used	Why
set(string)	allowed_envs	Used to validate that all environments used are valid
map(object(...))	environment_config	Each environment maps to its subnet and list of instances
list(object(...))	instances list in each env	Each instance has a name and instance_type
for_each with flattened map	aws_instance.env_instances	Deploys instances uniquely by env-name key like dev-dev-app-1
✅ Output:
You’ll get these instances deployed:

aws_instance.env_instances["dev-dev-app-1"]

aws_instance.env_instances["dev-dev-db-1"]

aws_instance.env_instances["prod-prod-app-1"]

aws_instance.env_instances["prod-prod-db-1"]
